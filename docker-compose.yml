version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: startup-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: startup_db
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - startup-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: startup-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - startup-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Next.js Application (Development)
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: development
    container_name: startup-app-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/startup_db?schema=public
      - NEXTAUTH_URL=http://localhost:3000
      - REDIS_URL=redis://redis:6379
    volumes:
      - .:/app
      - /app/node_modules
      - /app/.next
    networks:
      - startup-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - dev

  # Next.js Application (Production)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: startup-app
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/startup_db?schema=public
      - NEXTAUTH_URL=http://localhost:3000
      - REDIS_URL=redis://redis:6379
    networks:
      - startup-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - prod

  # Prisma Studio (Database GUI)
  prisma-studio:
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: prisma-studio
    container_name: startup-prisma-studio
    ports:
      - "5555:5555"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/startup_db?schema=public
    volumes:
      - .:/app
    networks:
      - startup-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - tools

  # Nginx (Production Load Balancer)
  nginx:
    image: nginx:alpine
    container_name: startup-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/ssl/certs
    networks:
      - startup-network
    depends_on:
      - app
    profiles:
      - prod

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  startup-network:
    driver: bridge
